{
	// Place your .leetcode ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"leetcode begin (C++)": {
		"scope": "cpp",
		"prefix": "leetcode begin",
		"body": [
			"#include <bits/stdc++.h>",
			"#include \"lassert/lassert.h\"",
			"",
			"using namespace std;",
			"",
			""
		]
	},
	"leetcode end (C++)": {
		"scope": "cpp",
		"prefix": "leetcode end",
		"body": [
			"int",
			"main () {",
			"  Solution s;",
			"  ASSERT_EQ(s.$1(), );",
			"  return 0;",
			"}",
			""
		]
	},
	"leetcode begin (Rust)": {
		"scope": "rust",
		"prefix": "leetcode begin",
		"body": [
			"struct Solution;",
			""
		]
	},
	"leetcode end (Rust)": {
		"scope": "rust",
		"prefix": "leetcode end",
		"body": [
			"#[test]",
			"fn test1() {",
			"    assert_eq!(Solution::$1(), );",
			"}",
			"",
			"#[test]",
			"fn test2() {",
			"    assert_eq!(Solution::$1(), );",
			"}",
			""
		]
	},
	"leetcode (Python3)": {
		"scope": "python",
		"prefix": "leetcode",
		"body": [
			"import unittest",
			"",
			"",
			"class TestSolution(unittest.TestCase):",
			"    def setUp(self) -> None:",
			"        self.sol = Solution()",
			"        return super().setUp()",
			"",
			"    def test_example1(self):",
			"        self.assertEqual(self.sol.$1(), )",
			"",
			"    def test_example2(self):",
			"        self.assertEqual(self.sol.$1(), )",
			"",
			"    def test_example3(self):",
			"        self.assertEqual(self.sol.$1(), )",
			"",
			"",
			"if __name__ == '__main__':",
			"    unittest.main()",
			""
		]
	},
}