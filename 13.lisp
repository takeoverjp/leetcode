;; [13] Roman to Integer

(defun roman-to-integer (roman)
  (let ((ans 0) (idx 0) (next #\.))
    (loop for c across roman do
      (setf next (if (>= (+ idx 1) (length roman)) #\. (char roman (+ idx 1))))
      (cond
        ((eq c #\I)
             (if (or (eq next #\V) (eq next #\X))
                (decf ans)
                (incf ans)))
        ((eq c #\V)
             (incf ans 5))
        ((eq c #\X)
             (if (or (eq next #\L) (eq next #\C))
                (decf ans 10)
                (incf ans 10)))
        ((eq c #\L)
             (incf ans 50))
        ((eq c #\C)
             (if (or (eq next #\D) (eq next #\M))
                (decf ans 100)
                (incf ans 100)))
        ((eq c #\D)
             (incf ans 500))
        ((eq c #\M)
             (incf ans 1000)))
      ;; (format t "~A ~A ~%" c next)
      (incf idx))
    ans))

(ql:quickload "fiveam")
;; (trace roman-to-integer)
(5am:test test-1 (5am:is (= 3 (roman-to-integer "III"))))
(5am:test test-2 (5am:is (= 58 (roman-to-integer "LVIII"))))
(5am:test test-3 (5am:is (= 1994 (roman-to-integer "MCMXCIV"))))
(5am:run!)
